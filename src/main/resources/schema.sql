CREATE TABLE IF NOT EXISTS users (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email VARCHAR(255) NOT NULL UNIQUE,
  login VARCHAR(255) NOT NULL UNIQUE,
  name VARCHAR(255),
  birthday TIMESTAMP
);

CREATE TABLE IF NOT EXISTS mpa_ratings (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(50) NOT NULL,
  description VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS genres (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(50) NOT NULL
);

CREATE TABLE IF NOT EXISTS friend_status (
  id INT AUTO_INCREMENT PRIMARY KEY,
  status VARCHAR(50) NOT NULL
);

CREATE TABLE IF NOT EXISTS films (
  id BIGINT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  release_date TIMESTAMP NOT NULL,
  duration INT NOT NULL,
  rating_id INT,
  FOREIGN KEY (rating_id) REFERENCES mpa_ratings(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS film_genres (
  film_id BIGINT,
  genre_id INT,
  PRIMARY KEY (film_id, genre_id),
  FOREIGN KEY (film_id) REFERENCES films(id),
  FOREIGN KEY (genre_id) REFERENCES genres(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS friendships (
  user_id BIGINT ,
  friend_id BIGINT,
  status_id INT,
  PRIMARY KEY (user_id, friend_id),
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  FOREIGN KEY (friend_id) REFERENCES users(id) ON DELETE CASCADE,
  FOREIGN KEY (status_id) REFERENCES friend_status(id) ON DELETE CASCADE,
  CHECK (user_id <> friend_id)
);

CREATE TABLE IF NOT EXISTS likes (
  film_id BIGINT ,
  user_id BIGINT ,
  PRIMARY KEY (film_id, user_id),
  FOREIGN KEY (film_id) REFERENCES films(id) ON DELETE CASCADE,
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

